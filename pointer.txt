
Pointers
//--------------------------------------------------------------------------------------------------------------
//Write a program in C to print a string in reverse using a pointer.
int main()
{
    string str;
    int i=0;
    cout<<"enter string:";
    cin>>str;
    char *ptr=NULL;         //char *ptr=&str[0];
    ptr=&str[0];
    while (*(ptr+i)!='\0')
    {   i++;    }
    cout<<i<<endl;
   
    for (int j=i ; j>=0 ;j--)
    {   cout<<*(ptr+j)<<" ";    }
    return 0;
}
//--------------------------------------------------------------------------------------------------------------

//print array in reverse array 
int main()
{
    int num[]={2,3,4,5,6,11};
    int *ptr=num;
    const int M=sizeof(num)/sizeof(num[0]);
    
    for (int i=M-1 ; i>=0 ; i--)
    {   cout<<*(ptr+i)<<" ";    }
    return 0;
}


//--------------------------------------------------------------------------------------------------------------

//printing sum of all elemets in the array
int main()
{
    int num[]={2,3,4,5,6,11};
    int *ptr=num;
    int sum=0;
    int *sumptr=&sum;
    const int M=sizeof(num)/sizeof(num[0]);
    
    for (int i=0 ; i<M ; i++)
    {   *sumptr+=*(ptr+i);  }
    cout<<*sumptr;
    return 0;
}

//--------------------------------------------------------------------------------------------------------------

int main()
{
    int x=25;
    int *ptr=&x;
    
    cout<<"Prints address of x: "<<ptr<<endl;
    cout<<"prints the contents of the address which the pointer points to: "<<*ptr<<endl;
    
    int a[]={1,3,5,7,9,11,13};
    int *aptr=a;       //int *aptr=&a[0];
    const int M=sizeof(a)/sizeof(a[0]);
    
    cout<<"printing address of a[0] of array: "<<aptr<<endl;
    cout<<"Printing the contents of the address which the pointer points to(priints a[0] value: "<<*aptr<<endl;
    cout<<"a[0]+1: "<<*aptr+1<<endl;
    cout<<"a[1]: "<<*(aptr+1)<<endl;
    cout<<"increments address: "<<aptr+1<<endl;
    cout<<"a[1]: "<<*(aptr+1)<<endl;
    cout<<"increments address:  "<<aptr++<<endl;
    cout<<"a[1]: "<<*aptr<<endl;
}

//--------------------------------------------------------------------------------------------------------------

passing pointers to a function 

void swap (int *a , int *b)
{
	int t;
	t=*a;
	*a=*bl
	*b=t;
}

int main()
{
	int n1=5,n2=5;
	swap(&n1,&n2);
}



//--------------------------------------------------------------------------------------------------------------
ARRAYS

int a[2][2] = { 1, 2, 3, 4 }; /* valid */
int a[ ][2] = { 1, 2, 3, 4 }; /* valid */
int a[2][ ] = { 1, 2, 3, 4 }; /* invalid */
int a[ ][ ] = { 1, 2, 3, 4 }; /* invalid */

a string variable can be accessed like an array eg
string name;
cin>name;				//Nor
cout<<name[o]<<endl;		//N
a string is terminated by a null character \0
//--------------------------------------------------------------------------------------------------------------
The declaration of pointers follows this syntax:

type * name;

int *pr, *p2; 	//declaring two pointer
int *pe,pq; 		//on;u pe is pointer pq is variable


*p++   // same as *(p++): increment pointer, and dereference unincremented address
*++p   // same as *(++p): increment pointer, and dereference incremented address
++*p   // same as ++(*p): dereference pointer, and increment the value it points to
(*p)++ // dereference pointer, and post-increment the value it points to

IMPORTANT
*p++ = *q++;
this is equivalent to 
*p = *q;
++p;
++q; 
as ++ has a higher precedence than *
//--------------------------------------------------------------------------------------------------------------
//Adding using pointers
    int *ptr1=NULL;
    int *ptr2=NULL;
    int a=3,b=5;
    ptr1=&a;
    ptr2=&b;
    cout<<*ptr1+*ptr2<<endl;
    //finding max using pointers
    if (*ptr1>*ptr2)
        cout<<*ptr1;
    else
        cout<<*ptr2;

/-----------------------------------------------------------------------------------------------------/
//inputting in array and outputting it 
    int *ptr=NULL;
    int arr[5];
    ptr=arr;
    //Method 1
    for (int i=0 ; i<5 ; i++)
        cin>>*(ptr+i);
    for (int i=0; i<5 ; i++)
        cout<<*(ptr+i)<<" ";
    //Method 2 
    cout<<"METHOD 2"<<endl;
    for (int i=0 ; i<5 ; i++)
    {    cin>>*ptr;
        ptr++;  }
        ptr=arr;
    for (int i=0; i<5 ; i++)
    {    cout<<*ptr<<" ";
        ptr++;}
        
/-----------------------------------------------------------------------------------------------------/
//printing largest number in array using pointers
    int *ptr=NULL;
    int arr[5];
    ptr=arr;
    for (int i=0 ; i<5 ; i++)
        cin>>*(ptr+i);
    int max= *ptr;
    
    for (int i=0 ; i<5; i++)
    {
        if (*(ptr+i)>max)
            max=*(ptr+i);
    }
    cout<<"max is : "<<max<<endl;

//--------------------------------------------------------------------------------------------------------------

